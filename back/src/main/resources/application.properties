# ===============================================
# spring
# ===============================================
spring.application.name=OrakgarakiApplication
server.port=8080
server.servlet.context-path=/api

# ===============================================
# mysql
# ===============================================
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=60000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.initialization-fail-timeout=60000
spring.datasource.hikari.validation-timeout=5000

# ===============================================
# JPA
# ===============================================
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# ===============================================
# JWT
# ===============================================
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION}
jwt.refresh-expiration=${JWT_REFRESH_EXPIRATION}

# ===============================================
# OAuth2
# ===============================================
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI}

# OAuth2
app.oauth2.redirect-uri=${OAUTH2_REDIRECT_URI}

# ===============================================
# AWS S3 & EventBridge
# ===============================================
spring.cloud.aws.credentials.access-key=${AWS_ACCESS_KEY_ID}                                  
spring.cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY}   
spring.cloud.aws.region.static=${AWS_REGION}
spring.cloud.aws.s3.bucket=${AWS_S3_BUCKET}

# EventBridge
aws.eventbridge.bus-name=${AWS_EVENTBRIDGE_BUS_NAME}
aws.eventbridge.source=orakgaraki.s3.upload
aws.eventbridge.detail-type=S3 Object Upload Event

# ===============================================
# upload maxi
# ===============================================
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB
spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=0
s3.upload.path=${ORAK_UPLOAD_PATH:${java.io.tmpdir}/orak-upload}
spring.servlet.multipart.location=${s3.upload.path}

# ===============================================
# logging
# ===============================================
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=INFO
logging.level.com.ssafy.lab.orak=INFO

logging.file.name=${LOG_FILE_PATH:./logs/orakgaraki.log}
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{36} - %msg%n
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId},%X{spanId}] %logger{36} - %msg%n

# ===============================================
# Actuator & Prometheus
# ===============================================
management.endpoints.web.exposure.include=health,info,prometheus,metrics,loggers
management.endpoint.health.show-details=always
management.endpoints.web.base-path=/actuator
management.server.port=8091

# Prometheus - 퍼센타일 설정은 각 환경별 properties에서 관리

management.metrics.tags.application=orakgaraki
management.metrics.tags.environment=${SPRING_PROFILES_ACTIVE}

management.metrics.enable.all=true

# Basic auth for Actuator (Prometheus scraping)
actuator.user=${ACTUATOR_USER}
actuator.password=${ACTUATOR_PASSWORD}
actuator.role-name=${ACTUATOR_ROLE_NAME}

# ===============================================
# Swagger/OpenAPI
# ===============================================
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operations-sorter=alpha
springdoc.swagger-ui.tags-sorter=alpha
springdoc.swagger-ui.display-request-duration=true
springdoc.swagger-ui.doc-expansion=none
springdoc.swagger-ui.config-url=/api/api-docs/swagger-config
springdoc.swagger-ui.url=/api/api-docs
# ===============================================
# Batch Processing Configuration
# ===============================================
processing.batch.enabled=true
processing.batch.max-concurrent-jobs=3
processing.batch.batch-size=5
processing.batch.interval-ms=60000
processing.batch.retry-attempts=3
processing.batch.retry-delay-ms=5000

# ===============================================
# Audio Processing Configuration
# ===============================================
processing.audio.format-conversion-enabled=true
processing.audio.metadata-extraction-enabled=true
processing.audio.max-processing-time-minutes=10

# ===============================================
# Image Processing Configuration
# ===============================================
processing.image.optimization-enabled=true
processing.image.thumbnail-generation-enabled=true
processing.image.max-width-px=1920
processing.image.max-height-px=1080
processing.image.thumbnail-size-px=300

# ===============================================
# Jackson JSON
# ===============================================
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=Asia/Seoul
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.serialization.fail-on-empty-beans=false
spring.jackson.deserialization.fail-on-unknown-properties=false

# ===============================================
# Kafka Configuration (EventBridge + Kafka Event-Driven)
# ===============================================
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}

# Kafka Producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.properties.linger.ms=5
spring.kafka.producer.compression-type=gzip

# Kafka Consumer
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP}
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.properties.session.timeout.ms=30000
spring.kafka.consumer.properties.heartbeat.interval.ms=3000
spring.kafka.consumer.max-poll-records=100
spring.kafka.listener.ack-mode=manual

# Kafka
kafka.topics.upload-events=upload-events
kafka.topics.processing-status=processing-status
kafka.topics.processing-results=processing-results

# ===============================================
# active profile
# ===============================================
spring.profiles.active=${SPRING_PROFILES_ACTIVE}

# ===============================================
# health check (Actuator 섹션과 통합됨)
# ===============================================
management.info.env.enabled=true

# ===============================================
# error handler
# ===============================================
server.error.include-message=never
server.error.include-binding-errors=never
server.error.include-stacktrace=never
server.error.include-exception=false

# ===============================================
# Profile Image
# ===============================================
app.profile.image.base-url=${PROFILE_IMAGE_BASE_URL:http://localhost:8080}

# ===============================================
# Python Service
# ===============================================
python.service.url=${PYTHON_SERVICE_URL:http://localhost:8000}

# ===============================================
# CORS
# ===============================================
spring.web.cors.allowed-origins=http://localhost:3000,http://localhost:5173,http://localhost:8081,http://localhost:3001